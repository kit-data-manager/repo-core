/**
 * Copyright 2021 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins { 
    id "io.freefair.lombok" version "8.1.0"
    id "io.freefair.maven-publish-java" version "8.0.1"
    id "io.spring.dependency-management" version "1.1.0" 
    //id "com.github.kt3k.coveralls" version "2.8.1" 
    id "org.owasp.dependencycheck" version "8.3.1"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    //id "org.ajoberstar.grgit" version "2.0.1"
    id "com.jfrog.bintray" version "1.8.5"
    id "java"
    id "jacoco"
    // plugins for release and publishing to maven repo
    id "signing"
    id "net.researchgate.release" version "3.0.2"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id 'maven-publish'
}

ext {
    // versions of dependencies
    springBootVersion = '3.1.0'
    springDocVersion  = '2.1.0'
    javersVersion     = '7.0.1'
}

description = "Core module for data repositories based on metadata model of datacite."
group = 'edu.kit.datamanager'

sourceCompatibility = 1.17
targetCompatibility = 1.17
 
jar {
    archiveBaseName = 'repo-core'
    archiveVersion = System.getenv('version')
}

println "Building ${name} version: ${version}"
println "Running gradle version: $gradle.gradleVersion"
println "JDK version: ${JavaVersion.current()}"
println "Spring Boot version: ${springBootVersion}"

repositories {
    mavenLocal() 
    mavenCentral()
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

if (project.hasProperty('release')) {
    println 'Using \'release\' profile for building ' + project.getName()
    apply from: 'gradle/profile-deploy.gradle'
}

dependencies {
    // Spring
    implementation 'org.springframework:spring-messaging:6.0.2'
    // Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-amqp"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.springframework.data:spring-data-elasticsearch:5.1.0'

   
    // springdoc
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
    // apache
    implementation "commons-configuration:commons-configuration:1.10"
    implementation "commons-io:commons-io:2.13.0"
    implementation "org.apache.commons:commons-collections4:4.4"
    // includes commons-lang3
    implementation "org.apache.commons:commons-text:1.10.0"
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation "org.apache.tika:tika-core:2.8.0"
    // javers
    implementation "org.javers:javers-spring-boot-starter-sql:${javersVersion}"
    implementation "com.google.code.gson:gson:2.10.1"

    // Database
    implementation "com.h2database:h2:2.1.214"
    implementation "org.postgresql:postgresql:42.6.0"
    // XML
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.15.2"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.15.2"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.15.2"

    //implementation "com.monitorjbl:spring-json-view:1.0.1"

    implementation "de.codecentric:spring-boot-admin-starter-client:3.0.4"
    // log4j core
    implementation "org.apache.logging.log4j:log4j-core"
    implementation "ch.qos.logback:logback-classic"
    //Java 11 Support 
//    implementation "javax.xml.bind:jaxb-api:2.3.1"
//    implementation "com.sun.xml.bind:jaxb-core:4.0.2"
//    implementation "com.sun.xml.bind:jaxb-impl:4.0.2"
//    implementation "javax.activation:activation:1.1.1"
//    implementation "org.javassist:javassist:3.29.2-GA"
    
    implementation "edu.kit.datamanager:service-base:1.2.0"

    implementation "com.github.java-json-tools:json-patch:1.13"
    implementation "com.github.dozermapper:dozer-core:6.5.2"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.springframework:spring-test"
     // boot starter
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'    
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'
    testImplementation "org.springframework.security:spring-security-test"
   
    //Java 11 Support 
    testImplementation "org.mockito:mockito-inline:5.2.0"

//    testImplementation 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
//    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
//    asciidoctor 'com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1'
}

test {
    println 'Execute all tests...'
    include '**/*'
    // Allow access to internal methods used by powerMockito
    // Will fail with Java17
    if (!JavaVersion.current().isJava8()) {
        println 'Allow access to private methods...'
        jvmArgs '--illegal-access=permit'
    }
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
        println 'Allow access to private methods of package java.util.stream...'
        jvmArgs '--add-opens=java.base/java.util.stream=ALL-UNNAMED'
   }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}
jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [\
                                //pure entity package currently not needed
            'org/datacite/**', \
                   'org/purl/**', \
                            //performance tests
            'edu/kit/datamanager/perf/**', \
                            //remove AuthenticationHelper tests due to mocking -> code coverage cannot be determined
                            //'edu/kit/datamanager/util/AuthenticationHelper*',
                            //deprecated stuff
            'edu/kit/datamanager/util/DCTransformationHelper*',
                  'edu/kit/datamanager/dao/ByExampleSpecification*',
                  'edu/kit/datamanager/controller/hateoas/**',
                            //exceptions 
            'edu/kit/datamanager/exceptions/**',
                  'edu/kit/datamanager/service/impl/RabbitMQMessagingService*',
                  'edu/kit/datamanager/configuration/**',
                  'edu/kit/datamanager/service/IGenericService*'
                        ])
                }))
    }
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
} 

jar {
  dependsOn jacocoTestReport
}

