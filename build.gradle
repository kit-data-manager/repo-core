/*
 * Copyright 2021 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { 
    id "io.freefair.lombok" version "6.1.0"
    id "io.freefair.maven-publish-java" version "6.1.0"
    id "io.spring.dependency-management" version "1.0.8.RELEASE" 
    id "com.github.kt3k.coveralls" version "2.8.1" 
    id "org.owasp.dependencycheck" version "3.1.2"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "org.ajoberstar.grgit" version "2.0.1"
    id "com.jfrog.bintray" version "1.7.3"
    id "java"
    id "jacoco"
    // plugins for release and publishing to maven repo
    id "signing"
    id "net.researchgate.release" version "2.8.1"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'maven-publish'
}
ext { 
    springBootVersion = '2.4.10' 
    springDocVersion  = '1.5.6'
    javersVersion     = '6.2.3'
}

description = "Core module for data repositories based on metadata model of datacite."
group = 'edu.kit.datamanager'

sourceCompatibility = 1.8
targetCompatibility = 1.8
 
jar {
    archiveBaseName = 'repo-core'
    archiveVersion = System.getenv('version')
}

println "Building ${name} version: ${version}"
println "Running gradle version: $gradle.gradleVersion"
println "JDK version: ${JavaVersion.current()}"

repositories {
    mavenLocal() 
    mavenCentral()
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

if (project.hasProperty('release')) {
    println 'Using \'release\' profile for building ' + project.getName()
    apply from: 'gradle/profile-deploy.gradle'
}

dependencies {
    implementation 'org.reflections:reflections:0.10.2'
    // Spring
    implementation 'org.springframework:spring-messaging:5.3.9'
    // Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-amqp"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
   
//    implementation "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3"
//    implementation "org.springframework.cloud:spring-cloud-starter:2.2.3.RELEASE"
    // springdoc
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"
    // apache
    implementation "commons-configuration:commons-configuration:1.10"
    implementation "commons-io:commons-io:2.11.0"
    implementation "org.apache.commons:commons-collections4:4.4"
    // includes commons-lang3
    implementation "org.apache.commons:commons-text:1.9"
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation "org.apache.tika:tika-core:1.27"
    // javers
    implementation "org.javers:javers-spring-boot-starter-sql:${javersVersion}"
    // Database
    implementation "com.h2database:h2:1.4.200"
    implementation "org.postgresql:postgresql:42.2.1"
    // XML
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.1"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.7.1"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.5"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.0"

    implementation "com.monitorjbl:spring-json-view:1.0.1"

    implementation "de.codecentric:spring-boot-admin-starter-client:2.1.6"

    //Java 11 Support 
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"
    implementation "com.sun.xml.bind:jaxb-impl:2.3.0.1"
    implementation "javax.activation:activation:1.1.1"
    implementation "org.javassist:javassist:3.28.0-GA"
    
    implementation "edu.kit.datamanager:service-base:0.3.0"
//    implementation "edu.kit.datamanager:generic-message-consumer:0.2.0"

    implementation "com.github.fge:json-patch:1.9"
    implementation "net.sf.dozer:dozer:5.5.1"

    implementation "io.jsonwebtoken:jjwt:0.9.1"

    // Logging
    implementation "org.slf4j:slf4j-api:1.7.32"
    implementation "ch.qos.logback:logback-classic:1.2.5"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.springframework:spring-test"
     // boot starter
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'    
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'
    testImplementation "org.springframework.security:spring-security-test"
   
    //Java 11 Support 
    testImplementation "org.mockito:mockito-core:3.12.0"
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"

//    testImplementation 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
//    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
//    asciidoctor 'com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1'
}

test {
//    useJUnitPlatform()
    // Allow access to internal methods used by powerMockito
    // Will fail with Java17
    if (!JavaVersion.current().isJava8()) {
        jvmArgs '--illegal-access=permit'
    }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [\
                                //pure entity package currently not needed
            'org/datacite/**', \
                   'org/purl/**', \
                            //performance tests
            'edu/kit/datamanager/perf/**', \
                            //remove AuthenticationHelper tests due to mocking -> code coverage cannot be determined
                            //'edu/kit/datamanager/util/AuthenticationHelper*',
                            //deprecated stuff
            'edu/kit/datamanager/util/DCTransformationHelper*',
                  'edu/kit/datamanager/dao/ByExampleSpecification*',
                  'edu/kit/datamanager/controller/hateoas/**',
                            //exceptions 
            'edu/kit/datamanager/exceptions/**',
                  'edu/kit/datamanager/service/impl/RabbitMQMessagingService*',
                  'edu/kit/datamanager/configuration/**',
                  'edu/kit/datamanager/service/IGenericService*'
                        ])
                }))
    }
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
} 

